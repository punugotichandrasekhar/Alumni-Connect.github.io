from flask import Flask,render_template,redirect,request,url_for, send_file, session, Response, jsonify
import mysql.connector, joblib, random, string, base64, pickle
import pandas as pd
import numpy as np
from datetime import datetime
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
from flask_mail import Mail, Message

app = Flask(__name__)
app.secret_key = 'accademy' 

# Flask-Mail configuration
app.config['MAIL_SERVER'] = 'smtp.gmail.com'  # For Gmail SMTP
app.config['MAIL_PORT'] = 465  # Or 587 for TLS
app.config['MAIL_USE_TLS'] = False  # Use TLS if you want (set to True for TLS)
app.config['MAIL_USE_SSL'] = True  # Set to True if using SSL
app.config['MAIL_USERNAME'] = "chandrasekharpunugoti@gmail.com"
app.config['MAIL_DEFAULT_SENDER'] = 'chandrasekharpunugoti@gmail.com'  # Default sender address
app.config['MAIL_PASSWORD'] = 'kudrwdqrftmbpsim'  # The 16-character app password generated by Google => need to do 2 step verification

# Initialize Flask-Mail
mail = Mail(app)

mydb = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    port="3306",
    database='accademy'
)

mycursor = mydb.cursor()

def executionquery(query,values):
    mycursor.execute(query,values)
    mydb.commit()
    return

def retrivequery1(query,values):
    mycursor.execute(query,values)
    data = mycursor.fetchall()
    return data

def retrivequery2(query):
    mycursor.execute(query)
    data = mycursor.fetchall()
    return data


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')


@app.route('/register', methods=["GET", "POST"])
def register():
    if request.method == "POST":
        name = request.form['name']
        email = request.form['email']
        graduation_year = request.form['graduation_year']
        field_of_study = request.form['field_of_study']
        USN_no = request.form['USN_no']
        current_job_title = request.form['current_job_title']
        company = request.form['company']
        location = request.form['location']
        linkedin = request.form['linkedin']
        password = request.form['password']
        c_password = request.form['c_password']
        img = request.files['img']
        binary_data = img.read()

        if password == c_password:
            # Retrieve existing email and USN from the database
            query = "SELECT email, USN_no FROM alumni"
            exist_data = retrivequery2(query)

            exist_email_list = [i[0] for i in exist_data]
            exist_USN_list = [i[1] for i in exist_data]

            if email not in exist_email_list:
                if USN_no not in exist_USN_list:

                    # Insert new alumni record into the database
                    query = """INSERT INTO alumni (name, email, graduation_year, field_of_study, current_job_title, 
                            company, location, linkedin, password, USN_no, status, img) 
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                    values = (name, email, graduation_year, field_of_study, current_job_title, 
                            company, location, linkedin, password, USN_no, "pending", binary_data)
                    executionquery(query, values)

                    return render_template('login.html', message="Successfully Registered!")
                return render_template('register.html', message="This USN number already exists!")
            return render_template('register.html', message="This email ID already exists!")
        return render_template('register.html', message="Confirm password does not match!")
    return render_template('register.html')


@app.route('/login', methods=["GET", "POST"])
def login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']

        if email == "admin@gmail.com":
            if password == "admin":
                return redirect("/admin_home")
            return render_template('login.html', message="Invalid Password!!")
        
        query = "SELECT * FROM alumni WHERE email = %s"
        values = (email,)
        alumni_data = retrivequery1(query, values)

        if alumni_data:
            if password == alumni_data[0][9]:
                if alumni_data[0][11] == "accepted":
                    session["user_id"] = alumni_data[0][0]
                    session["user_name"] = alumni_data[0][1]
                    session["user_email"] = alumni_data[0][2]
                    session["user_usn"] = alumni_data[0][10]

                    return redirect("/alumni_home")
                return render_template('login.html', message=f"Your registration request: {alumni_data[0][11]}")
            return render_template('login.html', message="Invalid Password!!")
        return render_template('login.html', message="This email ID does not exist!")
    return render_template('login.html')

@app.route('/events')
def events():
    query = "SELECT * FROM events"
    events_data = retrivequery2(query,)
    print(111, events_data)
    return render_template('events.html', events_data = events_data)

@app.route('/gallery')
def gallery():
    query = "SELECT * FROM gallery"
    gallery_data = retrivequery2(query)

    gallery_list = []
    for item in gallery_data:
        gallery_list.append({
            'id': item[0],
            'img_name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3]
        })

    return render_template('gallery.html', gallery_data=gallery_list)


@app.route('/news')
def news():
    query = "SELECT * FROM news"
    news_data = retrivequery2(query)

    news_list = []
    for item in news_data:
        news_list.append({
            'id': item[0],
            'title': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3],
            'link': item[4],
            'date': item[5],
        })
    return render_template('news.html', news_data = news_list)


@app.route('/achiever')
def achiever():
    query = "SELECT * FROM acheivers"
    acheiver_data = retrivequery2(query)

    acheiver_list = []
    for item in acheiver_data:
        acheiver_list.append({
            'id': item[0],
            'name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'batch': item[3],
            'department': item[4],
            'description': item[5],
        })

    return render_template('achiever.html', acheiver_data = acheiver_list)


@app.route('/chatbot')
def chatbot():
    return render_template('chatbot.html')

# Load the trained model
model = tf.keras.models.load_model(r'Chatbot\chatbot_model_cleaned.h5')

# Load the tokenizer
with open(r'Chatbot\tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)

# Load the LabelEncoder
with open(r'Chatbot\label_encoder.pickle', 'rb') as file:
    le = pickle.load(file)

# Load the cleaned data with responses
cleaned_data = pd.read_excel(r'Chatbot\enhanced_chatbot_intents_reference.xlsx')

# Preprocess the input text for prediction
def preprocess_input(text, tokenizer, max_len):
    encoded_text = tokenizer.texts_to_sequences([text.lower().strip()])  # Ensure input is lowercase and clean
    padded_text = pad_sequences(encoded_text, maxlen=max_len, padding='post')
    return padded_text

# Make a prediction and get the chatbot response
def predict_response(text):
    max_len = model.input_shape[1]  # Get the max length from the model's input shape
    padded_text = preprocess_input(text, tokenizer, max_len)

    prediction = model.predict(padded_text)
    predicted_class = np.argmax(prediction, axis=1)[0]
    predicted_intent = le.inverse_transform([predicted_class])[0]

    responses = cleaned_data[cleaned_data['Intent'] == predicted_intent]['Chatbot Response'].values
    if len(responses) > 0:
        return np.random.choice(responses)  # Randomly select a response if multiple exist
    else:
        return None  # Return None if no known intent is found

# Function to extract the user's name from the input
def extract_name(user_input):
    user_input = user_input.lower().strip()
    if "i am" in user_input:
        return user_input.split("i am", 1)[1].strip().capitalize()
    elif "my name is" in user_input:
        return user_input.split("my name is", 1)[1].strip().capitalize()
    else:
        return user_input.capitalize()

# Initialize global variables
user_name = ""
unknown_count = 0  # Count for unknown questions


@app.route('/chat', methods=['POST'])
def chat():
    global user_name, unknown_count

    user_input = request.form['user_input']
    response = {}

    if not user_name:
        user_name = extract_name(user_input)
        chatbot_response = f"Nice to meet you, {user_name}! How can I assist you with college enquiries today? Go ahead."
    else:
        if user_input.lower() in ["bye", "exit", "no", "end", "goodbye"]:
            chatbot_response = f"Goodbye, {user_name}! If you have any more questions, feel free to ask later."
            response['end_chat'] = True  # Flag to end chat
        else:
            chatbot_response = predict_response(user_input)

            # Handle unknown questions
            if chatbot_response is None:
                unknown_count += 1
                chatbot_response = "I'm not sure how to respond to that. I can help you with courses, admissions, or fees."
                if unknown_count >= 3:
                    chatbot_response += "\nWould you like to end the chat? (Type 'bye' to exit)"
            else:
                unknown_count = 0  # Reset unknown count if chatbot understands

    response['bot_response'] = chatbot_response
    return jsonify(response)




### Admin panel 

@app.route('/admin_home')
def admin_home():
    return render_template('admin/admin_home.html')


@app.route('/admin_alumni_list')
def admin_alumni_list():
    query = "SELECT * FROM alumni"
    alumni_data = retrivequery2(query,)

    alumni_list = []
    for item in alumni_data:
        alumni_list.append({
            'id': item[0],
            'name': item[1],
            'email': item[2],
            'graduation_year': item[3],
            'field_of_study': item[4],
            'current_job_title': item[5],
            'company': item[6],
            'location': item[7],
            'linkedin': item[8],
            'password': item[9],
            'USN_no': item[10],
            'status': item[11],
            'img': base64.b64encode(item[12]).decode('utf-8')
        })
    return render_template('admin/alumni_list.html', alumni_data = alumni_list)




@app.route('/admin_event_list')
def admin_event_list():
    query = "SELECT * FROM events"
    events_data = retrivequery2(query)
    return render_template('admin/event_list.html', events_data = events_data)


@app.route('/alumni_requests')
def alumni_requests():
    query = "SELECT * FROM alumni WHERE status = %s"
    values = ("pending",)
    alumni_data = retrivequery1(query, values)

    alumni_list = []
    for item in alumni_data:
        alumni_list.append({
            'id': item[0],
            'name': item[1],
            'email': item[2],
            'graduation_year': item[3],
            'field_of_study': item[4],
            'current_job_title': item[5],
            'company': item[6],
            'location': item[7],
            'linkedin': item[8],
            'password': item[9],
            'USN_no': item[10],
            'status': item[11],
            'img': base64.b64encode(item[12]).decode('utf-8')
        })
    return render_template('admin/alumni_requests.html', alumni_data = alumni_list)


@app.route('/accept_alumni_requests/<id>')
def accept_alumni_requests(id):
    query = "UPDATE alumni SET status = %s WHERE id = %s"
    values = ("accepted", id)
    executionquery(query, values)

    recipient = session["user_email"] 
    subject = 'Registration request accepted!'
    body = 'Congruatulations! Your request for registration as an alumni accepted by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
    else:
        print("registration Request acceptedd successfully!")
    return redirect("/alumni_requests")


@app.route('/reject_alumni_requests/<id>')
def reject_alumni_requests(id):
    query = "DELETE FROM alumni WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    recipient = session["user_email"] 
    subject = 'Registration request rejected!'
    body = 'Your request for registration as an alumni rejected by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
    finally:
        return redirect("/alumni_requests")


@app.route('/events_requests')
def events_requests():
    query = "SELECT * FROM payments WHERE status = %s"
    values = ("pending",)
    events_data = retrivequery1(query, values)
    return render_template('admin/events_requests.html', events_data = events_data)


@app.route('/accept_events_requests/<id>')
def accept_events_requests(id):
    query = "UPDATE payments SET status = %s WHERE id = %s"
    values = ("accepted", id)
    executionquery(query, values)
    message = "Request accepted successfully!"

    recipient = session["user_email"] 
    subject = 'Request accepted!'
    body = 'Congruatulations! Your request for booking Event accepted by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
        print(e)
    else:
        print("Booking Request accepted successfully!")

    query = "SELECT * FROM payments WHERE status = %s"
    values = ("pending", )
    events_data = retrivequery1(query, values)
    return render_template('admin/events_requests.html', events_data = events_data, message = message)


@app.route('/reject_events_requests/<id>')
def reject_events_requests(id):
    query = "DELETE FROM payments WHERE id = %s"
    values = (id,)
    executionquery(query, values)
    message = "Request Declined!"

    recipient = session["user_email"] 
    subject = 'Request rejected!'
    body = 'Your request for booking event rejected by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')

    query = "SELECT * FROM payments WHERE status = %s"
    values = ("pending",)
    events_data = retrivequery1(query, values)
    return render_template('admin/events_requests.html', events_data = events_data, message = message)


@app.route('/add_event', methods = ["GET", "POST"])
def add_event():
    message = None
    if request.method == "POST":
        event_name = request.form["event_name"]
        description = request.form["description"]
        event_date = request.form["event_date"]
        event_time = request.form["event_time"]
        event_amount = request.form["event_amount"]

        query = "INSERT INTO events (name, description, date, time, amount) VALUES (%s, %s, %s, %s, %s)"
        values = (event_name, description, event_date, event_time, event_amount)
        executionquery(query, values)
        message = "Event added successfully!"

    return render_template('admin/add_event.html', message = message)


@app.route('/manage_event', methods = ["GET", "POST"])
def manage_event():
    message = None
    if request.method == "POST":
        event_id = request.form["event_id"]
        event_name = request.form["event_name"]
        description = request.form["description"]
        event_date = request.form["event_date"]
        event_time = request.form["event_time"]
        event_amount = request.form["event_amount"]

        query = "UPDATE events SET name = %s, description = %s, date = %s, time = %s, amount = %s WHERE id = %s"
        values = (event_name, description, event_date, event_time, event_amount, event_id)
        executionquery(query, values)
        message = "Event Updated successfully!"

    query = "SELECT * FROM events"
    events_data = retrivequery2(query,)
    return render_template('admin/manage_event.html', events_data = events_data, message = message)

@app.route('/delete_event/<id>', methods = ["GET", "POST"])
def delete_event(id):
    query = "DELETE FROM events WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM events"
    events_data = retrivequery2(query,)
    return render_template('admin/manage_event.html', events_data = events_data, message = "Event Deleted successfully!")

@app.route('/add_gallery', methods=["GET", "POST"])
def add_gallery():
    if request.method == "POST":
        name = request.form["name"]
        img = request.files["img"]
        description = request.form["description"]

        # Read the uploaded image file in binary mode
        binary_data = img.read()

        # Insert the gallery data into the database
        query = "INSERT INTO gallery (img_name, img, description) VALUES (%s, %s, %s)"
        values = (name, binary_data, description)
        executionquery(query, values)
        return render_template('admin/add_gallery.html', message="Information added to the gallery!")
    return render_template('admin/add_gallery.html')

@app.route('/manage_gallery', methods=["GET", "POST"])
def manage_gallery():
    message = None
    if request.method == "POST":
        gallery_id = request.form["gallery_id"]
        name = request.form["name"]
        description = request.form["description"]
        img = request.files["img"]

        if img:
            binary_data = img.read()
            query = "UPDATE gallery SET img_name = %s, img = %s, description = %s WHERE id = %s"
            values = (name, binary_data, description, gallery_id)
        else:
            query = "UPDATE gallery SET img_name = %s, description = %s WHERE id = %s"
            values = (name, description, gallery_id)

        executionquery(query, values)
        message = "Gallery updated successfully!"

    query = "SELECT * FROM gallery"
    gallery_data = retrivequery2(query)

    gallery_list = []
    for item in gallery_data:
        gallery_list.append({
            'id': item[0],
            'img_name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3]
        })

    return render_template('admin/manage_gallery.html', gallery_data=gallery_list, message=message)


@app.route('/delete_gallery/<id>', methods = ["GET", "POST"])
def delete_gallery(id):
    query = "DELETE FROM gallery WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM gallery"
    gallery_data = retrivequery2(query)

    gallery_list = []
    for item in gallery_data:
        gallery_list.append({
            'id': item[0],
            'img_name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3]
        })
    return render_template('admin/manage_gallery.html', gallery_data = gallery_list, message = "gallery Deleted successfully!")


@app.route('/add_news', methods = ["GET", "POST"])
def add_news():
    message = None
    if request.method == "POST":
        name = request.form["name"]
        img = request.files["img"]
        description = request.form["description"]
        link = request.form["link"]
        date = request.form["date"]

        binary_data = img.read()

        # Insert the gallery data into the database
        query = "INSERT INTO news (name, img, description, link, date) VALUES (%s, %s, %s, %s, %s)"
        values = (name, binary_data, description, link, date)
        executionquery(query, values)

        message="News added succesfully!"
    return render_template('admin/add_news.html', message = message)


@app.route('/manage_news', methods = ["GET", "POST"])
def manage_news():
    message = None
    if request.method == "POST":
        id = request.form["id"]
        name = request.form["name"]
        img = request.files["img"]
        description = request.form["description"]
        link = request.form["link"]
        date = request.form["date"]

        if img:
            binary_data = img.read()
            query = "UPDATE news SET name = %s, img = %s, description = %s, link = %s, date = %s WHERE id = %s"
            values = (name, binary_data, description, link, date, id)
        else:
            query = "UPDATE news SET name = %s, description = %s, link = %s, date = %s WHERE id = %s"
            values = (name, description, link, date, id)

        executionquery(query, values)
        message = "News updated successfully!"

    query = "SELECT * FROM news"
    news_data = retrivequery2(query)

    news_list = []
    for item in news_data:
        news_list.append({
            'id': item[0],
            'title': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3],
            'link': item[4],
            'date': item[5],
        })
    return render_template('admin/manage_news.html', news_data = news_list, message = message)


@app.route('/delete_news/<id>', methods = ["GET", "POST"])
def delete_news(id):
    query = "DELETE FROM news WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM news"
    news_data = retrivequery2(query)

    news_list = []
    for item in news_data:
        news_list.append({
            'id': item[0],
            'title': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3],
            'link': item[4],
            'date': item[5],
        })
    return render_template('admin/manage_news.html', news_data = news_list, message = "news Deleted successfully!")


@app.route('/add_achiever', methods = ["GET", "POST"])
def add_achiever():
    message = None
    if request.method == "POST":
        name = request.form["name"]
        img = request.files["img"]
        batch = request.form["batch"]
        department = request.form["department"]
        description = request.form["description"]

        binary_data = img.read()

        query = "INSERT INTO acheivers (name, img, batch, department, description) VALUES (%s, %s, %s, %s, %s)"
        values = (name, binary_data, batch, department, description)
        executionquery(query, values)

        message="News added succesfully!"
    return render_template('admin/add_achiever.html', message = message)


@app.route('/manage_achiever', methods = ["GET", "POST"])
def manage_achiever():
    message = None
    if request.method == "POST":
        id = request.form["id"]
        name = request.form["name"]
        img = request.files["img"]
        batch = request.form["batch"]
        department = request.form["department"]
        description = request.form["description"]

        if img:
            binary_data = img.read()
            query = "UPDATE acheivers SET name = %s, img = %s, batch = %s, department = %s, description = %s WHERE id = %s"
            values = (name, binary_data, batch, department, description, id)
        else:
            query = "UPDATE acheivers SET name = %s, batch = %s, department = %s, description = %s WHERE id = %s"
            values = (name, batch, department, description, id)

        executionquery(query, values)
        message = "Data updated successfully!"

    query = "SELECT * FROM acheivers"
    acheiver_data = retrivequery2(query)

    acheiver_list = []
    for item in acheiver_data:
        acheiver_list.append({
            'id': item[0],
            'name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'batch': item[3],
            'department': item[4],
            'description': item[5],
        })

    return render_template('admin/manage_achiever.html', acheiver_data = acheiver_list, message = message)



@app.route('/delete_achiever/<id>', methods = ["GET", "POST"])
def delete_achiever(id):
    query = "DELETE FROM acheivers WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM acheivers"
    acheiver_data = retrivequery2(query)

    acheiver_list = []
    for item in acheiver_data:
        acheiver_list.append({
            'id': item[0],
            'name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'batch': item[3],
            'department': item[4],
            'description': item[5],
        })
    return render_template('admin/manage_achiever.html', acheiver_data = acheiver_list, message = "achiever Deleted successfully!")





### alumni Panel

@app.route('/alumni_home')
def alumni_home():
    return render_template('alumni/alumni_home.html')


@app.route('/alumni_gallery')
def alumni_gallery():
    query = "SELECT * FROM gallery"
    gallery_data = retrivequery2(query)

    gallery_list = []
    for item in gallery_data:
        gallery_list.append({
            'id': item[0],
            'img_name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3]
        })

    return render_template('alumni/alumni_gallery.html', gallery_data=gallery_list)


@app.route('/alumni_news')
def alumni_news():
    query = "SELECT * FROM news"
    news_data = retrivequery2(query)

    news_list = []
    for item in news_data:
        news_list.append({
            'id': item[0],
            'title': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3],
            'link': item[4],
            'date': item[5],
        })
    return render_template('alumni/alumni_news.html', news_data = news_list)


@app.route('/alumni_achiever')
def alumni_achiever():
    query = "SELECT * FROM acheivers"
    acheiver_data = retrivequery2(query)

    acheiver_list = []
    for item in acheiver_data:
        acheiver_list.append({
            'id': item[0],
            'name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'batch': item[3],
            'department': item[4],
            'description': item[5],
        })

    return render_template('alumni/alumni_achiever.html', acheiver_data = acheiver_list)


@app.route('/alumni_list', methods = ["GET", "POST"])
def alumni_list():
    if request.method == "POST":
        name = request.form["name"]
        query = "SELECT * FROM alumni WHERE status = %s AND name = %s"
        values = ("accepted", name)
    
    else:
        sender_id = session["user_id"]
        query = "SELECT * FROM alumni WHERE status = %s AND id != %s"
        values = ("accepted", sender_id)

    alumni_data = retrivequery1(query, values)
    return render_template('alumni/alumni_list.html', alumni_data = alumni_data)


@app.route('/alumni_chat/<id>', methods = ["GET", "POST"])
def alumni_chat(id):
    receiver_id = id
    sender_id = session["user_id"]
    sender_name = session["user_name"]

    if request.method == "POST":
        msg = request.form["msg"]
        now = datetime.now()

        query = "INSERT INTO chats (sender_id, receiver_id, msg, sent_time) VALUES (%s, %s, %s, %s)"
        values = (sender_id, receiver_id, msg, now)
        executionquery(query, values)

    query = "SELECT * FROM alumni WHERE id = %s"
    values = (id,)
    receiver_data = retrivequery1(query, values)
    receiver_name = receiver_data[0][1]

    query = "SELECT * FROM chats WHERE (sender_id = %s AND receiver_id = %s) OR (receiver_id = %s AND sender_id = %s) ORDER BY sent_time"
    values = (sender_id, receiver_id, sender_id, receiver_id)
    chat_data = retrivequery1(query, values)

    return render_template('alumni/alumni_chat.html', 
                           chat_data = chat_data, 
                           sender_id = sender_id, 
                           receiver_id = receiver_id, 
                           sender_name = sender_name, 
                           receiver_name = receiver_name)


@app.route('/events_list', methods = ["GET", "POST"])
def events_list():
    message = None
    if request.method == "POST":
        id = request.form["id"]
        user_id = session["user_id"]

        query = "INSERT INTO payments (alumni_id, event_id) VALUES (%s, %s)"
        values = (user_id, id)
        executionquery(query, values)
        message = "Request sended successfully!"

    query = "SELECT * FROM events"
    events_data = retrivequery2(query,)
    return render_template('alumni/events_list.html', events_data = events_data, message = message)


@app.route('/alumni_chatbot')
def alumni_chatbot():
    
    return render_template('alumni/alumni_chatbot.html')


@app.route('/profile', methods = ["GET", "POST"])
def profile():
    message = None
    user_id = session["user_id"]
    user_email = session["user_email"]
    user_usn = session["user_usn"]

    if request.method == "POST":
        name = request.form['name']
        email = request.form['email']
        graduation_year = request.form['graduation_year']
        field_of_study = request.form['field_of_study']
        USN_no = request.form['USN_no']
        current_job_title = request.form['current_job_title']
        company = request.form['company']
        location = request.form['location']
        linkedin = request.form['linkedin']
        password = request.form['password']
        img = request.files['img']

        query = "SELECT email, USN_no FROM alumni"
        exist_data = retrivequery2(query)

        exist_email_list = [i[0] for i in exist_data]
        exist_USN_list = [i[1] for i in exist_data]

        if email == user_email:
            if USN_no == user_usn:
                if img:
                    binary_data = img.read()
                    query = "UPDATE alumni SET name = %s, email = %s, graduation_year = %s, field_of_study = %s, current_job_title = %s, company = %s, location = %s, linkedin = %s, password = %s, USN_no = %s, img = %s WHERE id = %s"
                    values = (name, email, graduation_year, field_of_study, current_job_title, company, location, linkedin, password, USN_no, binary_data, user_id)
                else:
                    query = "UPDATE alumni SET name = %s, email = %s, graduation_year = %s, field_of_study = %s, current_job_title = %s, company = %s, location = %s, linkedin = %s, password = %s, USN_no = %s WHERE id = %s"
                    values = (name, email, graduation_year, field_of_study, current_job_title, company, location, linkedin, password, USN_no, user_id)

                executionquery(query, values)
                message="Successfully Updated!"
            else:
                if USN_no not in exist_USN_list:
                    if img:
                        binary_data = img.read()
                        query = "UPDATE alumni SET name = %s, email = %s, graduation_year = %s, field_of_study = %s, current_job_title = %s, company = %s, location = %s, linkedin = %s, password = %s, USN_no = %s, img = %s WHERE id = %s"
                        values = (name, email, graduation_year, field_of_study, current_job_title, company, location, linkedin, password, USN_no, binary_data, user_id)
                    else:
                        query = "UPDATE alumni SET name = %s, email = %s, graduation_year = %s, field_of_study = %s, current_job_title = %s, company = %s, location = %s, linkedin = %s, password = %s, USN_no = %s WHERE id = %s"
                        values = (name, email, graduation_year, field_of_study, current_job_title, company, location, linkedin, password, USN_no, user_id)

                    executionquery(query, values)
                    message="Successfully Updated!"
                else:
                    message="This USN number already exists!"
        else:
            if email not in exist_email_list:
                if USN_no == user_usn:
                    if img:
                        binary_data = img.read()
                        query = "UPDATE alumni SET name = %s, email = %s, graduation_year = %s, field_of_study = %s, current_job_title = %s, company = %s, location = %s, linkedin = %s, password = %s, USN_no = %s, img = %s WHERE id = %s"
                        values = (name, email, graduation_year, field_of_study, current_job_title, company, location, linkedin, password, USN_no, binary_data, user_id)
                    else:
                        query = "UPDATE alumni SET name = %s, email = %s, graduation_year = %s, field_of_study = %s, current_job_title = %s, company = %s, location = %s, linkedin = %s, password = %s, USN_no = %s WHERE id = %s"
                        values = (name, email, graduation_year, field_of_study, current_job_title, company, location, linkedin, password, USN_no, user_id)

                    executionquery(query, values)
                    message="Successfully Updated!"
                else:
                    if USN_no not in exist_USN_list:
                        if img:
                            binary_data = img.read()
                            query = "UPDATE alumni SET name = %s, email = %s, graduation_year = %s, field_of_study = %s, current_job_title = %s, company = %s, location = %s, linkedin = %s, password = %s, USN_no = %s, img = %s WHERE id = %s"
                            values = (name, email, graduation_year, field_of_study, current_job_title, company, location, linkedin, password, USN_no, binary_data, user_id)
                        else:
                            query = "UPDATE alumni SET name = %s, email = %s, graduation_year = %s, field_of_study = %s, current_job_title = %s, company = %s, location = %s, linkedin = %s, password = %s, USN_no = %s WHERE id = %s"
                            values = (name, email, graduation_year, field_of_study, current_job_title, company, location, linkedin, password, USN_no, user_id)

                        executionquery(query, values)
                        message="Successfully Updated!"
                    else:
                        message="This USN number already exists!"
            else:
                message="This email ID already exists!"


    query = "SELECT * FROM alumni WHERE id = %s"
    values = (user_id,)
    alumni_data = retrivequery1(query, values)

    alumni_list = []
    for item in alumni_data:
        alumni_list.append({
            'id': item[0],
            'name': item[1],
            'email': item[2],
            'graduation_year': item[3],
            'field_of_study': item[4],
            'current_job_title': item[5],
            'company': item[6],
            'location': item[7],
            'linkedin': item[8],
            'password': item[9],
            'USN_no': item[10],
            'status': item[11],
            'img': base64.b64encode(item[12]).decode('utf-8')
        })
    return render_template('alumni/profile.html', data = alumni_list[0], message = message)





if __name__ == '__main__':
    app.run(debug = True)