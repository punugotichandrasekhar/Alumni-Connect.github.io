from flask import Flask,render_template,redirect,request,url_for, send_file, session, Response, jsonify
import mysql.connector, joblib, random, string, base64, pickle
import pandas as pd
import numpy as np
from datetime import datetime
import tensorflow as tf
from tensorflow.keras.preprocessing.sequence import pad_sequences
from flask_mail import Mail, Message
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import json
import google.generativeai as genai
from fuzzywuzzy import process

app = Flask(__name__)
app.secret_key = 'accademy' 

# Flask-Mail configuration
app.config['MAIL_SERVER'] = 'smtp.gmail.com'  # For Gmail SMTP
app.config['MAIL_PORT'] = 465  # Or 587 for TLS
app.config['MAIL_USE_TLS'] = False  # Use TLS if you want (set to True for TLS)
app.config['MAIL_USE_SSL'] = True  # Set to True if using SSL
app.config['MAIL_USERNAME'] = "chandrasekharpunugoti@gmail.com"
app.config['MAIL_DEFAULT_SENDER'] = 'chandrasekharpunugoti@gmail.com'  # Default sender address
app.config['MAIL_PASSWORD'] = 'ezwqlzmgktzwowfq'  # The 16-character app password generated by Google => need to do 2 step verification

# Initialize Flask-Mail
mail = Mail(app)

mydb = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    port="3306",
    database='accademy'
)

mycursor = mydb.cursor()

def executionquery(query,values):
    mycursor.execute(query,values)
    mydb.commit()
    return

def retrivequery1(query,values):
    mycursor.execute(query,values)
    data = mycursor.fetchall()
    return data

def retrivequery2(query):
    mycursor.execute(query)
    data = mycursor.fetchall()
    return data


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')


@app.route('/events')
def events():
    query = "SELECT * FROM events"
    events_data = retrivequery2(query,)
    return render_template('events.html', events_data = events_data)

@app.route('/gallery')
def gallery():
    query = "SELECT * FROM gallery"
    gallery_data = retrivequery2(query)

    gallery_list = []
    for item in gallery_data:
        gallery_list.append({
            'id': item[0],
            'img_name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3]
        })

    return render_template('gallery.html', gallery_data=gallery_list)


@app.route('/news')
def news():
    query = "SELECT * FROM news"
    news_data = retrivequery2(query)

    news_list = []
    for item in news_data:
        news_list.append({
            'id': item[0],
            'title': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3],
            'link': item[4],
            'date': item[5],
        })
    return render_template('news.html', news_data = news_list)


@app.route('/achiever')
def achiever():
    query = "SELECT * FROM acheivers"
    acheiver_data = retrivequery2(query)

    acheiver_list = []
    for item in acheiver_data:
        acheiver_list.append({
            'id': item[0],
            'name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'batch': item[3],
            'department': item[4],
            'description': item[5],
        })

    return render_template('achiever.html', acheiver_data = acheiver_list)



@app.route('/chatbot')
def chatbot():
    return render_template('chatbot.html')



# Load dataset
with open(r"dataset\dataset.json", "r", encoding="utf-8") as file:
    dataset = json.load(file)

# Configure Google Gemini API
genai.configure(api_key="YOUR_GEMINI_API_KEY")

def get_intent(user_input):
    """Find the best-matching intent based on user input."""
    best_match = None
    highest_score = 0
    
    for intent_data in dataset["intents"]:
        for sample_text in intent_data["text"]:
            score = process.extractOne(user_input, intent_data["text"])[1]
            if score > highest_score:
                highest_score = score
                best_match = intent_data
    
    return best_match if highest_score > 60 else None

def get_gemini_response(query):
    """Get response from Google Gemini API."""
    model = genai.GenerativeModel("gemini-pro")
    response = model.generate_content(query)
    return response.text if response else "I'm not sure about that, can you clarify?"


@app.route("/chat", methods=["POST"])
def chat():
    user_input = request.json.get("message")
    if not user_input:
        return jsonify({"response": "Please enter a valid query."})
    
    intent_data = get_intent(user_input)
    if intent_data:
        response = intent_data["responses"][0]  # Get the first predefined response
    else:
        response = get_gemini_response(user_input)  # Fallback to Google Gemini
    
    return jsonify({"response": response})


# @app.route('/chat', methods=['POST'])
# def chat():
#     global user_name, unknown_count

#     user_input = request.form['user_input']
#     response = {}

#     if not user_name:
#         user_name = extract_name(user_input)
#         chatbot_response = f"Nice to meet you, {user_name}! How can I assist you with college enquiries today? Go ahead."
#     else:
#         if user_input.lower() in ["bye", "exit", "no", "end", "goodbye"]:
#             chatbot_response = f"Goodbye, {user_name}! If you have any more questions, feel free to ask later."
#             response['end_chat'] = True  # Flag to end chat
#         else:
#             chatbot_response = predict_response(user_input)

#             # Handle unknown questions
#             if chatbot_response is None:
#                 unknown_count += 1
#                 chatbot_response = "I'm not sure how to respond to that. I can help you with courses, admissions, or fees."
#                 if unknown_count >= 3:
#                     chatbot_response += "\nWould you like to end the chat? (Type 'bye' to exit)"
#             else:
#                 unknown_count = 0  # Reset unknown count if chatbot understands

#     response['bot_response'] = chatbot_response
#     return jsonify(response)




### Admin panel 

@app.route('/admin_login', methods=["GET", "POST"])
def admin_login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']

        if email == "admin@gmail.com" and password == "admin":
            return redirect("/admin_home")
        return render_template('admin/login.html', message="Invalid Credentials!!")
    return render_template('admin/login.html')


@app.route('/admin_home')
def admin_home():
    return render_template('admin/admin_home.html')


@app.route('/admin_alumni_list')
def admin_alumni_list():
    query = "SELECT * FROM alumni"
    alumni_data = retrivequery2(query,)

    alumni_list = []
    for item in alumni_data:
        alumni_list.append({
            'id': item[0],
            'name': item[1],
            'email': item[2],
            'graduation_year': item[3],
            'field_of_study': item[4],
            'current_job_title': item[5],
            'company': item[6],
            'location': item[7],
            'linkedin': item[8],
            'password': item[9],
            'USN_no': item[10],
            'status': item[11],
            'img': base64.b64encode(item[12]).decode('utf-8')
        })
    return render_template('admin/alumni_list.html', alumni_data = alumni_list)


@app.route('/admin_students_list')
def admin_students_list():
    query = "SELECT * FROM students"
    students_data = retrivequery2(query,)

    students_list = []
    for item in students_data:
        students_list.append({
            'id': item[0],
            'name': item[1],
            'email': item[2],
            'reg_id': item[3],
            'department': item[4],
            'qualification': item[5],
            'img': base64.b64encode(item[6]).decode('utf-8'),
            'password': item[7],
            'status': item[8]
        })
    return render_template('admin/students_list.html', students_data = students_list)


@app.route('/admin_event_list')
def admin_event_list():
    query = "SELECT * FROM events"
    events_data = retrivequery2(query)
    return render_template('admin/event_list.html', events_data = events_data)


# @app.route('/admin_donation_list')
# def admin_donation_list():
#     query = "SELECT * FROM donations"
#     donations_data = retrivequery2(query)
#     return render_template('admin/donation_list.html', donations_data = donations_data)


@app.route('/alumni_requests')
def alumni_requests():
    query = "SELECT * FROM alumni WHERE status = %s"
    values = ("pending",)
    alumni_data = retrivequery1(query, values)

    alumni_list = []
    for item in alumni_data:
        alumni_list.append({
            'id': item[0],
            'name': item[1],
            'email': item[2],
            'graduation_year': item[3],
            'field_of_study': item[4],
            'current_job_title': item[5],
            'company': item[6],
            'location': item[7],
            'linkedin': item[8],
            'password': item[9],
            'USN_no': item[10],
            'status': item[11],
            'img': base64.b64encode(item[12]).decode('utf-8')
        })
    return render_template('admin/alumni_requests.html', alumni_data = alumni_list)


@app.route('/accept_alumni_requests/<id>')
def accept_alumni_requests(id):
    query = "UPDATE alumni SET status = %s WHERE id = %s"
    values = ("accepted", id)
    executionquery(query, values)

    query = "SELECT * FROM alumni WHERE id = %s"
    values = (id,)
    data = retrivequery1(query, values)
    recipient = data[0][2]

    # recipient = session["user_email"] 
    subject = 'Registration request accepted!'
    body = 'Congruatulations! Your request for registration as an alumni accepted by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
    else:
        print("registration Request acceptedd successfully!")
    return redirect("/alumni_requests")



@app.route('/reject_alumni_requests/<id>')
def reject_alumni_requests(id):
    query = "DELETE FROM alumni WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM alumni WHERE id = %s"
    values = (id,)
    data = retrivequery1(query, values)
    recipient = data[0][2]

    # recipient = session["user_email"] 
    subject = 'Registration request rejected!'
    body = 'Your request for registration as an alumni rejected by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
    finally:
        return redirect("/alumni_requests")
    

@app.route('/student_requests')
def student_requests():
    query = "SELECT * FROM students WHERE status = %s"
    values = ("pending",)
    students_data = retrivequery1(query, values)

    students_list = []
    for item in students_data:
        students_list.append({
            'id': item[0],
            'name': item[1],
            'email': item[2],
            'reg_id': item[3],
            'department': item[4],
            'qualification': item[5],
            'img': base64.b64encode(item[6]).decode('utf-8'),
            'password': item[7],
            'status': item[8]
        })
    return render_template('admin/student_requests.html', students_data = students_list)


@app.route('/accept_student_requests/<id>')
def accept_student_requests(id):
    query = "UPDATE students SET status = %s WHERE id = %s"
    values = ("accepted", id)
    executionquery(query, values)

    query = "SELECT email FROM students WHERE id = %s"
    values = (id,)
    student_email = retrivequery1(query, values)

    recipient = student_email[0][0]
    subject = 'Registration request accepted!'
    body = 'Congruatulations! Your request for registration as an student accepted by admin!'
    msg = Message(subject, recipients=[recipient])
    msg.body = body  

    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
    return redirect("/student_requests")


@app.route('/reject_student_requests/<id>')
def reject_student_requests(id):
    query = "DELETE FROM students WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT email FROM students WHERE id = %s"
    values = (id,)
    student_email = retrivequery1(query, values)

    recipient = student_email[0][0]
    subject = 'Registration request rejected!'
    body = 'Your request for registration as an student rejected by admin!'
    msg = Message(subject, recipients=[recipient])
    msg.body = body

    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
    finally:
        return redirect("/student_requests")


@app.route('/events_requests')
def events_requests():
    query = "SELECT * FROM payments WHERE status = %s"
    values = ("pending",)
    events_data = retrivequery1(query, values)
    return render_template('admin/events_requests.html', events_data = events_data)


@app.route('/accept_events_requests/<id>')
def accept_events_requests(id):
    query = "UPDATE payments SET status = %s WHERE id = %s"
    values = ("accepted", id)
    executionquery(query, values)
    message = "Request acceptedd successfully!"

    query = "SELECT alumni_id FROM payments WHERE id = %s"
    values = (id,)
    alumni_id = retrivequery1(query, values)

    query = "SELECT email FROM alumni WHERE id = %s"
    values = (alumni_id[0][0],)
    alumni_email = retrivequery1(query, values)

    recipient = alumni_email[0][0]
    subject = 'Request accepted!'
    body = 'Congruatulations! Your request for booking Event accepted by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')

    query = "SELECT * FROM payments WHERE status = %s"
    values = ("pending", )
    events_data = retrivequery1(query, values)
    return render_template('admin/events_requests.html', events_data = events_data, message = message)


@app.route('/reject_events_requests/<id>')
def reject_events_requests(id):
    query = "SELECT alumni_id FROM payments WHERE id = %s"
    values = (id,)
    alumni_id = retrivequery1(query, values)
    print(44444, alumni_id)

    query = "DELETE FROM payments WHERE id = %s"
    values = (id,)
    executionquery(query, values)
    message = "Request Declined!"

    query = "SELECT email FROM alumni WHERE id = %s"
    values = (alumni_id[0][0],)
    alumni_email = retrivequery1(query, values)

    recipient = alumni_email[0][0]
    subject = 'Request rejected!'
    body = 'Your request for booking event rejected by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')

    query = "SELECT * FROM payments WHERE status = %s"
    values = ("pending",)
    events_data = retrivequery1(query, values)
    return render_template('admin/events_requests.html', events_data = events_data, message = message)


@app.route('/add_event', methods = ["GET", "POST"])
def add_event():
    message = None
    if request.method == "POST":
        event_name = request.form["event_name"]
        description = request.form["description"]
        event_date = request.form["event_date"]
        event_time = request.form["event_time"]
        event_amount = request.form["event_amount"]

        query = "INSERT INTO events (name, description, date, time, amount) VALUES (%s, %s, %s, %s, %s)"
        values = (event_name, description, event_date, event_time, event_amount)
        executionquery(query, values)
        message = "Event added successfully!"

    return render_template('admin/add_event.html', message = message)


@app.route('/manage_event', methods = ["GET", "POST"])
def manage_event():
    message = None
    if request.method == "POST":
        event_id = request.form["event_id"]
        event_name = request.form["event_name"]
        description = request.form["description"]
        event_date = request.form["event_date"]
        event_time = request.form["event_time"]
        event_amount = request.form["event_amount"]

        query = "UPDATE events SET name = %s, description = %s, date = %s, time = %s, amount = %s WHERE id = %s"
        values = (event_name, description, event_date, event_time, event_amount, event_id)
        executionquery(query, values)
        message = "Event Updated successfully!"

    query = "SELECT * FROM events"
    events_data = retrivequery2(query,)
    return render_template('admin/manage_event.html', events_data = events_data, message = message)

@app.route('/delete_event/<id>', methods = ["GET", "POST"])
def delete_event(id):
    query = "DELETE FROM events WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM events"
    events_data = retrivequery2(query,)
    return render_template('admin/manage_event.html', events_data = events_data, message = "Event Deleted successfully!")

@app.route('/add_gallery', methods=["GET", "POST"])
def add_gallery():
    if request.method == "POST":
        name = request.form["name"]
        img = request.files["img"]
        description = request.form["description"]

        # Read the uploaded image file in binary mode
        binary_data = img.read()

        # Insert the gallery data into the database
        query = "INSERT INTO gallery (img_name, img, description) VALUES (%s, %s, %s)"
        values = (name, binary_data, description)
        executionquery(query, values)
        return render_template('admin/add_gallery.html', message="Information added to the gallery!")
    return render_template('admin/add_gallery.html')

@app.route('/manage_gallery', methods=["GET", "POST"])
def manage_gallery():
    message = None
    if request.method == "POST":
        gallery_id = request.form["gallery_id"]
        name = request.form["name"]
        description = request.form["description"]
        img = request.files["img"]

        if img:
            binary_data = img.read()
            query = "UPDATE gallery SET img_name = %s, img = %s, description = %s WHERE id = %s"
            values = (name, binary_data, description, gallery_id)
        else:
            query = "UPDATE gallery SET img_name = %s, description = %s WHERE id = %s"
            values = (name, description, gallery_id)

        executionquery(query, values)
        message = "Gallery updated successfully!"

    query = "SELECT * FROM gallery"
    gallery_data = retrivequery2(query)

    gallery_list = []
    for item in gallery_data:
        gallery_list.append({
            'id': item[0],
            'img_name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3]
        })

    return render_template('admin/manage_gallery.html', gallery_data=gallery_list, message=message)


@app.route('/delete_gallery/<id>', methods = ["GET", "POST"])
def delete_gallery(id):
    query = "DELETE FROM gallery WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM gallery"
    gallery_data = retrivequery2(query)

    gallery_list = []
    for item in gallery_data:
        gallery_list.append({
            'id': item[0],
            'img_name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3]
        })
    return render_template('admin/manage_gallery.html', gallery_data = gallery_list, message = "gallery Deleted successfully!")


@app.route('/add_news', methods = ["GET", "POST"])
def add_news():
    message = None
    if request.method == "POST":
        name = request.form["name"]
        img = request.files["img"]
        description = request.form["description"]
        link = request.form["link"]
        date = request.form["date"]

        binary_data = img.read()

        # Insert the gallery data into the database
        query = "INSERT INTO news (name, img, description, link, date) VALUES (%s, %s, %s, %s, %s)"
        values = (name, binary_data, description, link, date)
        executionquery(query, values)

        message="News added succesfully!"
    return render_template('admin/add_news.html', message = message)


@app.route('/manage_news', methods = ["GET", "POST"])
def manage_news():
    message = None
    if request.method == "POST":
        id = request.form["id"]
        name = request.form["name"]
        img = request.files["img"]
        description = request.form["description"]
        link = request.form["link"]
        date = request.form["date"]

        if img:
            binary_data = img.read()
            query = "UPDATE news SET name = %s, img = %s, description = %s, link = %s, date = %s WHERE id = %s"
            values = (name, binary_data, description, link, date, id)
        else:
            query = "UPDATE news SET name = %s, description = %s, link = %s, date = %s WHERE id = %s"
            values = (name, description, link, date, id)

        executionquery(query, values)
        message = "News updated successfully!"

    query = "SELECT * FROM news"
    news_data = retrivequery2(query)

    news_list = []
    for item in news_data:
        news_list.append({
            'id': item[0],
            'title': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3],
            'link': item[4],
            'date': item[5],
        })
    return render_template('admin/manage_news.html', news_data = news_list, message = message)


@app.route('/delete_news/<id>', methods = ["GET", "POST"])
def delete_news(id):
    query = "DELETE FROM news WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM news"
    news_data = retrivequery2(query)

    news_list = []
    for item in news_data:
        news_list.append({
            'id': item[0],
            'title': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'description': item[3],
            'link': item[4],
            'date': item[5],
        })
    return render_template('admin/manage_news.html', news_data = news_list, message = "news Deleted successfully!")


@app.route('/add_achiever', methods = ["GET", "POST"])
def add_achiever():
    message = None
    if request.method == "POST":
        name = request.form["name"]
        img = request.files["img"]
        batch = request.form["batch"]
        department = request.form["department"]
        description = request.form["description"]

        binary_data = img.read()

        query = "INSERT INTO acheivers (name, img, batch, department, description) VALUES (%s, %s, %s, %s, %s)"
        values = (name, binary_data, batch, department, description)
        executionquery(query, values)

        message="News added succesfully!"
    return render_template('admin/add_achiever.html', message = message)


@app.route('/manage_achiever', methods = ["GET", "POST"])
def manage_achiever():
    message = None
    if request.method == "POST":
        id = request.form["id"]
        name = request.form["name"]
        img = request.files["img"]
        batch = request.form["batch"]
        department = request.form["department"]
        description = request.form["description"]

        if img:
            binary_data = img.read()
            query = "UPDATE acheivers SET name = %s, img = %s, batch = %s, department = %s, description = %s WHERE id = %s"
            values = (name, binary_data, batch, department, description, id)
        else:
            query = "UPDATE acheivers SET name = %s, batch = %s, department = %s, description = %s WHERE id = %s"
            values = (name, batch, department, description, id)

        executionquery(query, values)
        message = "Data updated successfully!"

    query = "SELECT * FROM acheivers"
    acheiver_data = retrivequery2(query)

    acheiver_list = []
    for item in acheiver_data:
        acheiver_list.append({
            'id': item[0],
            'name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'batch': item[3],
            'department': item[4],
            'description': item[5],
        })

    return render_template('admin/manage_achiever.html', acheiver_data = acheiver_list, message = message)



@app.route('/delete_achiever/<id>', methods = ["GET", "POST"])
def delete_achiever(id):
    query = "DELETE FROM acheivers WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "SELECT * FROM acheivers"
    acheiver_data = retrivequery2(query)

    acheiver_list = []
    for item in acheiver_data:
        acheiver_list.append({
            'id': item[0],
            'name': item[1],
            'img': base64.b64encode(item[2]).decode('utf-8'),
            'batch': item[3],
            'department': item[4],
            'description': item[5],
        })
    return render_template('admin/manage_achiever.html', acheiver_data = acheiver_list, message = "achiever Deleted successfully!")





### alumni Panel

@app.route('/alumni_register', methods=["GET", "POST"])
def alumni_register():
    if request.method == "POST":
        name = request.form['name']
        email = request.form['email']
        graduation_year = request.form['graduation_year']
        field_of_study = request.form['field_of_study']
        USN_no = request.form['USN_no']
        current_job_title = request.form['current_job_title']
        company = request.form['company']
        location = request.form['location']
        linkedin = request.form['linkedin']
        password = request.form['password']
        c_password = request.form['c_password']
        img = request.files['img']
        binary_data = img.read()

        if password == c_password:
            # Retrieve existing email and USN from the database
            query = "SELECT email, USN_no FROM alumni"
            exist_data = retrivequery2(query)

            exist_email_list = [i[0] for i in exist_data]
            exist_USN_list = [i[1] for i in exist_data]

            if email not in exist_email_list:
                if USN_no not in exist_USN_list:

                    # Insert new alumni record into the database
                    query = """INSERT INTO alumni (name, email, graduation_year, field_of_study, current_job_title, 
                            company, location, linkedin, password, USN_no, status, img) 
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
                    values = (name, email, graduation_year, field_of_study, current_job_title, 
                            company, location, linkedin, password, USN_no, "pending", binary_data)
                    executionquery(query, values)

                    return render_template('alumni/login.html', message="Successfully Registered!")
                return render_template('alumni/register.html', message="This USN number already exists!")
            return render_template('alumni/register.html', message="This email ID already exists!")
        return render_template('alumni/register.html', message="Confirm password does not match!")
    return render_template('alumni/register.html')


@app.route('/alumni_login', methods=["GET", "POST"])
def alumni_login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']
        
        query = "SELECT * FROM alumni WHERE email = %s"
        values = (email,)
        alumni_data = retrivequery1(query, values)

        if alumni_data:
            if password == alumni_data[0][9]:
                if alumni_data[0][11] == "accepted":
                    session["alumni_id"] = alumni_data[0][0]
                    session["alumni_name"] = alumni_data[0][1]
                    session["alumni_email"] = alumni_data[0][2]
                    session["alumni_usn"] = alumni_data[0][10]

                    return redirect("/alumni_home")
                return render_template('alumni/login.html', message=f"Your registration request: {alumni_data[0][11]}")
            return render_template('alumni/login.html', message="Invalid Password!!")
        return render_template('alumni/login.html', message="This email ID does not exist!")
    return render_template('alumni/login.html')


@app.route('/alumni_home')
def alumni_home():
    return render_template('alumni/alumni_home.html')


@app.route('/alumni_alumni_list_chatbox', methods = ["GET", "POST"])
def alumni_alumni_list_chatbox():
    if request.method == "POST":
        name = request.form["name"]
        query = "SELECT * FROM alumni WHERE status = %s AND name = %s"
        values = ("accepted", name)
    
    else:
        sender_id = session["alumni_id"]
        query = "SELECT * FROM alumni WHERE status = %s AND id != %s"
        values = ("accepted", sender_id)

    alumni_data = retrivequery1(query, values)
    return render_template('alumni/alumni_alumni_list_chatbox.html', alumni_data = alumni_data)


@app.route('/alumni_alumni_chat/<id>', methods = ["GET", "POST"])
def alumni_alumni_chat(id):
    receiver_id = id
    sender_id = session["alumni_id"]
    sender_name = session["alumni_name"]

    if request.method == "POST":
        msg = request.form["msg"]
        now = datetime.now()

        query = "INSERT INTO alumni_alumni_chats (sender_id, receiver_id, msg, sent_time) VALUES (%s, %s, %s, %s)"
        values = (sender_id, receiver_id, msg, now)
        executionquery(query, values)

    query = "SELECT * FROM alumni WHERE id = %s"
    values = (id,)
    receiver_data = retrivequery1(query, values)
    receiver_name = receiver_data[0][1]

    query = "SELECT * FROM alumni_alumni_chats WHERE (sender_id = %s AND receiver_id = %s) OR (receiver_id = %s AND sender_id = %s) ORDER BY sent_time"
    values = (sender_id, receiver_id, sender_id, receiver_id)
    chat_data = retrivequery1(query, values)

    return render_template('alumni/alumni_alumni_chat.html', 
                           chat_data = chat_data, 
                           sender_id = sender_id, 
                           receiver_id = receiver_id, 
                           sender_name = sender_name, 
                           receiver_name = receiver_name)




@app.route('/alumni_student_list_chatbox', methods = ["GET", "POST"])
def alumni_student_list_chatbox():
    if request.method == "POST":
        name = request.form["name"]
        query = "SELECT * FROM students WHERE status = %s AND name = %s"
        values = ("accepted", name)
    
    else:
        query = "SELECT * FROM students WHERE status = %s"
        values = ("accepted",)

    students_data = retrivequery1(query, values)
    return render_template('alumni/alumni_student_list_chatbox.html', students_data = students_data)


@app.route('/alumni_student_chat/<id>', methods = ["GET", "POST"])
def alumni_student_chat(id):
    student_id = id
    alumni_id = session["alumni_id"]
    alumni_name = session["alumni_name"]

    if request.method == "POST":
        msg = request.form["msg"]
        now = datetime.now()

        query = "INSERT INTO alumni_student_chats (alumni_id, student_id, msg, sent_time, sender) VALUES (%s, %s, %s, %s, %s)"
        values = (alumni_id, student_id, msg, now, 'alumni')
        executionquery(query, values)

    query = "SELECT * FROM students WHERE id = %s"
    values = (id,)
    student_data = retrivequery1(query, values)
    student_name = student_data[0][1]

    query = "SELECT * FROM alumni_student_chats WHERE alumni_id = %s AND student_id = %s ORDER BY sent_time"
    values = (alumni_id, student_id)
    chat_data = retrivequery1(query, values)

    return render_template('alumni/alumni_student_chat.html', 
                           chat_data = chat_data, 
                           alumni_id = alumni_id, 
                           student_id = student_id, 
                           alumni_name = alumni_name, 
                           student_name = student_name)


@app.route('/events_list', methods = ["GET", "POST"])
def events_list():
    message = None
    if request.method == "POST":
        id = request.form["id"]
        alumni_id = session["alumni_id"]

        query = "INSERT INTO payments (alumni_id, event_id) VALUES (%s, %s)"
        values = (alumni_id, id)
        executionquery(query, values)
        message = "Request sended successfully!"

    query = "SELECT * FROM events"
    events_data = retrivequery2(query,)
    return render_template('alumni/events_list.html', events_data = events_data, message = message)


@app.route('/alumni_chatbot')
def alumni_chatbot():
    
    return render_template('alumni/alumni_chatbot.html')










@app.route('/alumni_add_job', methods = ["GET", "POST"])
def alumni_add_job():
    message = None
    if request.method == "POST":
        job_name = request.form["job_name"]
        description = request.form["description"]
        experience = request.form["experience"]
        qualification = request.form["qualification"]
        no_of_vaccancy = request.form["no_of_vaccancy"]
        company_name = request.form["company_name"]
        company_location = request.form["company_location"]
        img = request.files['img']
        binary_data = img.read()

        alumni_id = session["alumni_id"]
        alumni_name = session["alumni_name"]
        alumni_email = session["alumni_email"]

        query = """INSERT INTO jobs 
                (name, description, experience, qualification, no_of_vaccancy, company_name, company_location, img, alumni_id, alumni_name, alumni_email) 
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
        values = (job_name, description, experience, qualification, no_of_vaccancy, company_name, company_location, binary_data, alumni_id, alumni_name, alumni_email)
        executionquery(query, values)

        # Process skills: Split by comma, strip spaces, and remove empty values
        skills = request.form["skills"]
        skills_list = [skill.strip() for skill in skills.split(",") if skill.strip()]

        query = "SELECT * FROM jobs ORDER BY id DESC LIMIT 1"
        job_data = retrivequery2(query)
        job_id = job_data[0][0]

        for skill in skills_list:
            mycursor.execute("INSERT INTO job_skills (job_id, skill) VALUES (%s, %s)", (job_id, skill))
        mydb.commit()

        message = "Job added successfully!"
    return render_template('alumni/alumni_add_job.html', message = message)


@app.route('/alumni_manage_job', methods = ["GET", "POST"])
def alumni_manage_job():
    message = None
    if request.method == "POST":
        job_id = request.form["job_id"]
        job_name = request.form["job_name"]
        description = request.form["description"]
        experience = request.form["experience"]
        qualification = request.form["qualification"]
        no_of_vaccancy = request.form["no_of_vaccancy"]
        company_name = request.form["company_name"]
        company_location = request.form["company_location"]
        img = request.files['img']

        if img:
            binary_data = img.read()
            query = "UPDATE jobs SET name = %s, description = %s, experience = %s, qualification = %s, no_of_vaccancy = %s, company_name = %s, company_location = %s, img = %s WHERE id = %s"
            values = (job_name, description, experience, qualification, no_of_vaccancy, company_name, company_location, binary_data, job_id)
        else:
            query = "UPDATE jobs SET name = %s, description = %s, experience = %s, qualification = %s, no_of_vaccancy = %s, company_name = %s, company_location = %s WHERE id = %s"
            values = (job_name, description, experience, qualification, no_of_vaccancy, company_name, company_location, job_id)
        executionquery(query, values)


        # Process skills: Split by comma, strip spaces, and remove empty values
        skills = request.form["skills"]
        skills_list = [skill.strip() for skill in skills.split(",") if skill.strip()]


        query = "DELETE FROM job_skills WHERE job_id = %s"
        values = (job_id,)
        executionquery(query, values)

        for skill in skills_list:
            mycursor.execute("INSERT INTO job_skills (job_id, skill) VALUES (%s, %s)", (job_id, skill))
        mydb.commit()
        message = "Job Updated successfully!"

    alumni_id = session["alumni_id"]
    query = "SELECT * FROM jobs WHERE alumni_id = %s"
    values = (alumni_id,)
    jobs_data = retrivequery1(query, values)

    jobs_list = []
    for item in jobs_data:
        jobs_list.append({
            'job_id': item[0],
            'job_name': item[1],
            'job_description': item[2],
            'job_experience': item[3],
            'job_qualification': item[4],
            'job_no_of_vaccancy': item[5],
            'job_company_name': item[6],
            'job_company_location': item[7],
            'job_img': base64.b64encode(item[8]).decode('utf-8'),
            'job_alumni_id': item[9],
            'job_alumni_name': item[10],
            'job_alumni_email': item[11]
        })

    job_ids = []
    for job in jobs_list:
        job_ids.append(job['job_id'])

    full_skills_list = {}
    for id in job_ids:
        query = "SELECT skill FROM job_skills WHERE job_id = %s"
        values = (id,)
        skills_data = retrivequery1(query, values)

        skills_list = []
        for i in skills_data:
            skills_list.append(i[0])
        skills_list = ', '.join(skills_list)

        full_skills_list[id] = skills_list

    return render_template('alumni/alumni_manage_job.html', jobs_data = jobs_list, skills_list = full_skills_list, message = message)



@app.route('/alumni_delete_job/<id>', methods = ["GET", "POST"])
def alumni_delete_job(id):
    query = "DELETE FROM jobs WHERE id = %s"
    values = (id,)
    executionquery(query, values)

    query = "DELETE FROM job_skills WHERE job_id = %s"
    values = (id,)
    executionquery(query, values)

    alumni_id = session["alumni_id"]
    query = "SELECT * FROM jobs WHERE alumni_id = %s"
    values = (alumni_id,)
    jobs_data = retrivequery1(query, values)

    jobs_list = []
    for item in jobs_data:
        jobs_list.append({
            'job_id': item[0],
            'job_name': item[1],
            'job_description': item[2],
            'job_experience': item[3],
            'job_qualification': item[4],
            'job_no_of_vaccancy': item[5],
            'job_company_name': item[6],
            'job_company_location': item[7],
            'job_img': base64.b64encode(item[8]).decode('utf-8'),
            'job_alumni_id': item[9],
            'job_alumni_name': item[10],
            'job_alumni_email': item[11]
        })

    job_ids = []
    for job in jobs_list:
        job_ids.append(job['job_id'])

    full_skills_list = {}
    for id in job_ids:
        query = "SELECT skill FROM job_skills WHERE job_id = %s"
        values = (id,)
        skills_data = retrivequery1(query, values)

        skills_list = []
        for i in skills_data:
            skills_list.append(i[0])
        skills_list = ', '.join(skills_list)

        full_skills_list[id] = skills_list

    return render_template('alumni/alumni_manage_job.html', jobs_data = jobs_list, skills_list = full_skills_list, message = "Job Deleted successfully!")




@app.route('/alumni_job_applications', methods=["GET", "POST"])
def alumni_job_applications():
    alumni_id = session["alumni_id"]
    
    query = """
        SELECT ja.id, ja.job_id, ja.student_id, ja.alumni_id, ja.resume, ja.status, 
               s.name AS student_name, s.email AS student_email, s.reg_id, s.department, s.qualification, s.img AS student_img, 
               j.name AS job_name, j.description AS job_description, j.experience AS job_experience, j.qualification AS job_qualification, j.no_of_vaccancy, j.company_name 
        FROM job_applications ja
        JOIN students s ON ja.student_id = s.id
        JOIN jobs j ON ja.job_id = j.id
        WHERE ja.alumni_id = %s AND ja.status = %s
    """
    values = (alumni_id, 'pending')
    job_application_data = retrivequery1(query, values)

    job_application_list = []
    for item in job_application_data:
        job_application_list.append({
            'job_application_id': item[0],
            'job_id': item[1],
            'student_id': item[2],
            'alumni_id': item[3],
            'resume': base64.b64encode(item[4]).decode('utf-8'),
            'status': item[5],
            'student_name': item[6],
            'student_email': item[7],
            'student_reg_id': item[8],
            'student_department': item[9],
            'student_qualification': item[10],
            'student_img': base64.b64encode(item[11]).decode('utf-8'),
            'job_name': item[12],
            'job_description': item[13],
            'job_experience': item[14],
            'job_qualification': item[15],
            'job_no_of_vaccancy': item[16],
            'job_company_name': item[17]
        })

    message1 = None
    message = session.get("message", None)
    if message:
        message1 = message
        session["message"] = None

    return render_template('alumni/alumni_job_applications.html', job_application_list = job_application_list, message = message1)



@app.route('/accept_job_application/<int:job_application_id>', methods=["GET", "POST"])
def accept_job_application(job_application_id):
    query = "UPDATE job_applications SET status = %s WHERE id = %s"
    values = ('accepted', job_application_id)
    executionquery(query, values)

    query = "SELECT email FROM students WHERE id = (SELECT student_id FROM job_applications WHERE id = %s)"
    values = (job_application_id,)
    applicant_email = retrivequery1(query, values)

    recipient = applicant_email[0][0]
    subject = 'JOb application accepted!'
    body = 'Congruatulations! Your request for job application was accpted!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
        session["message"] = "Job application accepted!"
    except Exception as e:
        print(f'Error: {str(e)}')
    return redirect('/alumni_job_applications')


@app.route('/reject_job_application/<int:job_application_id>', methods=["GET", "POST"])
def reject_job_application(job_application_id):
    query = "UPDATE job_applications SET status = %s WHERE id = %s"
    values = ('rejected', job_application_id)
    executionquery(query, values)

    query = "SELECT email FROM students WHERE id = (SELECT student_id FROM job_applications WHERE id = %s)"
    values = (job_application_id,)
    applicant_email = retrivequery1(query, values)

    recipient = applicant_email[0][0]
    subject = 'Job application was rejected!'
    body = 'Sorry! Your job application was rejected!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
        session["message"] = "Job application rejected!"
    except Exception as e:
        print(f'Error: {str(e)}')
    return redirect('/alumni_job_applications')



### Student Panel

@app.route('/student_register', methods=["GET", "POST"])
def student_register():
    if request.method == "POST":
        name = request.form['name']
        email = request.form['email']
        reg_id = request.form['reg_id']
        department = request.form['department']
        qualification = request.form['qualification']
        password = request.form['password']
        c_password = request.form['c_password']
        img = request.files['img']
        binary_data = img.read()

        if password == c_password:
            query = "SELECT email, reg_id FROM students"
            exist_data = retrivequery2(query)

            exist_email_list = [i[0] for i in exist_data]
            exist_reg_id_list = [i[1] for i in exist_data]

            if email not in exist_email_list:
                if reg_id not in exist_reg_id_list:
                    query = """INSERT INTO students (name, email, reg_id, department, qualification, img, password, status) 
                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"""
                    values = (name, email, reg_id, department, qualification, binary_data, password, "pending")
                    executionquery(query, values)

                    return render_template('student/login.html', message="Successfully Registered!")
                return render_template('student/register.html', message="This reg_id number already exists!")
            return render_template('student/register.html', message="This email ID already exists!")
        return render_template('student/register.html', message="Confirm password does not match!")
    return render_template('student/register.html')


@app.route('/student_login', methods=["GET", "POST"])
def student_login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']
        
        query = "SELECT * FROM students WHERE email = %s"
        values = (email,)
        student_data = retrivequery1(query, values)

        if student_data:
            if password == student_data[0][7]:
                if student_data[0][8] == "accepted":
                    session["student_id"] = student_data[0][0]
                    session["student_name"] = student_data[0][1]
                    session["student_email"] = student_data[0][2]
                    session["student_reg_id"] = student_data[0][3]

                    return redirect("/student_home")
                return render_template('student/login.html', message=f"Your registration request: {student_data[0][8]}")
            return render_template('student/login.html', message="Invalid Password!!")
        return render_template('student/login.html', message="This email ID does not exist!")
    return render_template('student/login.html')


@app.route('/student_home')
def student_home():
    return render_template('student/student_home.html')



@app.route('/student_alumni_list', methods = ["GET", "POST"])
def student_alumni_list():
    if request.method == "POST":
        name = request.form["name"]
        query = "SELECT * FROM alumni WHERE status = %s AND name = %s"
        values = ("accepted", name)
    
    else:
        # sender_id = session["alumni_id"]
        query = "SELECT * FROM alumni WHERE status = %s"
        values = ("accepted",)

    alumni_data = retrivequery1(query, values)
    return render_template('student/student_alumni_list.html', alumni_data = alumni_data)


@app.route('/student_alumni_chat/<id>', methods = ["GET", "POST"])
def student_alumni_chat(id):
    alumni_id = id
    student_id = session["student_id"]
    student_name = session["student_name"]

    if request.method == "POST":
        msg = request.form["msg"]
        now = datetime.now()

        query = "INSERT INTO alumni_student_chats (student_id, alumni_id, msg, sent_time, sender) VALUES (%s, %s, %s, %s, %s)"
        values = (student_id, alumni_id, msg, now, 'student')
        executionquery(query, values)


    query = "SELECT * FROM alumni WHERE id = %s"
    values = (id,)
    alumni_data = retrivequery1(query, values)
    alumni_name = alumni_data[0][1]

    query = "SELECT * FROM alumni_student_chats WHERE alumni_id = %s AND student_id = %s ORDER BY sent_time"
    values = (alumni_id, student_id)
    chat_data = retrivequery1(query, values)

    return render_template('student/student_alumni_chat.html', 
                           chat_data = chat_data, 
                           student_id = student_id, 
                           alumni_id = alumni_id, 
                           student_name = student_name, 
                           alumni_name = alumni_name)





@app.route('/student_job_list', methods=["GET", "POST"])
def student_job_list():
    message = None

    if request.method == "POST":
        student_id = session.get("student_id")
        job_id = request.form.get("job_id")
        alumni_id = request.form.get("alumni_id")
        resume = request.files.get("resume")

        # Check if a file was uploaded
        if resume and resume.filename.endswith('.pdf'):
            resume_binary = resume.read()  # Read file contents as binary

            # Insert into MySQL database
            query = """
                INSERT INTO job_applications (job_id, student_id, alumni_id, resume, status) 
                VALUES (%s, %s, %s, %s, %s)
            """
            values = (job_id, student_id, alumni_id, resume_binary, 'pending')

            try:
                executionquery(query, values)  # Insert into the database
                message = "Job application submitted successfully!"
            except mysql.connector.Error as err:
                message = f"Database error: {err}"
        else:
            message = "Please upload a valid PDF file!"

    # Retrieve job listings
    query = "SELECT * FROM jobs"
    jobs_data = retrivequery2(query)

    jobs_list = []
    for item in jobs_data:
        jobs_list.append({
            'job_id': item[0],
            'job_name': item[1],
            'job_description': item[2],
            'job_experience': item[3],
            'job_qualification': item[4],
            'job_no_of_vaccancy': item[5],
            'job_company_name': item[6],
            'job_company_location': item[7],
            'job_img': base64.b64encode(item[8]).decode('utf-8'),
            'job_alumni_id': item[9],
            'job_alumni_name': item[10],
            'job_alumni_email': item[11]
        })

    # Retrieve job skills
    job_ids = [job['job_id'] for job in jobs_list]
    full_skills_list = {}

    for job_id in job_ids:
        query = "SELECT skill FROM job_skills WHERE job_id = %s"
        values = (job_id,)
        skills_data = retrivequery1(query, values)

        skills_list = [i[0] for i in skills_data]
        full_skills_list[job_id] = ', '.join(skills_list)

    return render_template('student/student_job_list.html', jobs_data=jobs_list, skills_list=full_skills_list, message=message)



@app.route('/student_job_search_list', methods=["GET", "POST"])
def student_job_search_list():
    message = None
    jobs_list = []
    full_skills_list = {}

    if request.method == "POST":
        selected_job_name = request.form.get("job")  # Job title input
        min_experience = request.form.get("experience")  # Minimum experience input
        skills = request.form.get("skills")  # Skills input

        # Base query with conditions added dynamically
        query = "SELECT * FROM jobs WHERE 1=1"
        params = []

        if selected_job_name:
            query += " AND name = %s"
            params.append(selected_job_name)
        
        if min_experience:
            query += " AND experience >= %s"
            params.append(min_experience)

        if skills:
            skill_terms = [s.strip() for s in skills.split(',')]
            skill_placeholders = ', '.join(['%s'] * len(skill_terms))
            query += f" AND id IN (SELECT DISTINCT job_id FROM job_skills WHERE skill IN ({skill_placeholders}))"
            params.extend(skill_terms)


        # Execute query
        jobs_data = retrivequery1(query, params)

        # Process job details into a list of dictionaries
        for item in jobs_data:
            jobs_list.append({
                'job_id': item[0],
                'job_name': item[1],
                'job_description': item[2],
                'job_experience': item[3],
                'job_qualification': item[4],
                'job_no_of_vaccancy': item[5],
                'job_company_name': item[6],
                'job_company_location': item[7],
                'job_img': base64.b64encode(item[8]).decode('utf-8'),
                'job_alumni_id': item[9],
                'job_alumni_name': item[10],
                'job_alumni_email': item[11]
            })

        # Retrieve associated skills for each job
        for job in jobs_list:
            job_id = job['job_id']
            skills_query = "SELECT skill FROM job_skills WHERE job_id = %s"
            skills_data = retrivequery1(skills_query, (job_id,))
            skills_list = [skill[0] for skill in skills_data]
            full_skills_list[job_id] = ', '.join(skills_list)

    # Get all job names for the dropdown
    query = "SELECT name FROM jobs"
    job_names = retrivequery2(query)

    # Render the template with all the gathered data
    return render_template(
        'student/student_job_search_list.html', 
        jobs_data=jobs_list, 
        skills_list=full_skills_list, 
        message=message, 
        job_names=job_names
    )



# Load the BART model and tokenizer
model_path = "summarization_model"
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForSeq2SeqLM.from_pretrained(model_path)

@app.route('/text_summarization', methods=["GET", "POST"])
def text_summarization():
    if request.method == "POST":
        text = request.form["description"]
        summary_ratio = request.form.get("summary_ratio", "30")  # Default to 30%

        try:
            summary_ratio = float(summary_ratio) / 100  # Convert to a decimal
            if summary_ratio <= 0 or summary_ratio > 1:
                raise ValueError("Summary ratio must be between 0 and 100.")
        except ValueError as e:
            return render_template('student/text_summarization.html', message = f"Invalid percentage value. {str(e)}")

        # Tokenize the input text
        inputs = tokenizer(text, return_tensors="pt", max_length=1024, truncation=True)

        # Calculate lengths based on input text
        input_length = len(tokenizer.tokenize(text))
        max_length = int(input_length * summary_ratio)  # Maximum length based on the desired ratio
        min_length = max(30, int(max_length * 0.5))  # Set a minimum length that is at least 30 tokens

        # Generate the summary
        summary_ids = model.generate(
            inputs["input_ids"], 
            max_length=max_length, 
            min_length=min_length, 
            length_penalty=2.0, 
            num_beams=4, 
            early_stopping=True
        )

        # Decode the summary
        summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)

        return render_template('student/text_summarization.html', prediction = summary)
    return render_template('student/text_summarization.html')


if __name__ == '__main__':
    app.run(debug = True)
